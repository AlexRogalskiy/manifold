package manifold.internal.javac;

import com.sun.tools.javac.code.Symbol;
import com.sun.tools.javac.code.Symtab;
import com.sun.tools.javac.comp.Modules;
import com.sun.tools.javac.resources.CompilerProperties;
import com.sun.tools.javac.model.JavacElements;
import com.sun.tools.javac.tree.JCTree;
import com.sun.tools.javac.code.Type;
import com.sun.tools.javac.util.Context;
import com.sun.tools.javac.util.Filter;
import com.sun.tools.javac.util.JCDiagnostic;
import com.sun.tools.javac.util.Log;
import com.sun.tools.javac.util.Name;
import com.sun.tools.javac.util.Names;
import com.sun.tools.javac.util.List;
import java.io.IOException;
import java.util.Locale;
import javax.tools.Diagnostic;
import javax.tools.JavaFileManager;
import javax.tools.JavaFileObject;

public class JavaDynamicJdk_11 implements IDynamicJdk
{
  @Override
  public <T> void report( Log issueLogger, Diagnostic<? extends T> diagnostic )
  {
    // Adapted from JavacMessager.printMessage.  Following same basic routine regarding use of Log

    JavaFileObject oldSource = issueLogger.useSource( (JavaFileObject)diagnostic.getSource() );
    try
    {
      switch( diagnostic.getKind() )
      {
        case ERROR:
          issueLogger.error( JCDiagnostic.DiagnosticFlag.MULTIPLE, new IssueReporter.Position( diagnostic ), CompilerProperties.Errors.ProcMessager( diagnostic.getMessage( Locale.getDefault() ) ) );
          break;
        case WARNING:
          issueLogger.warning( new IssueReporter.Position( diagnostic ), CompilerProperties.Warnings.ProcMessager( diagnostic.getMessage( Locale.getDefault() ) ) );
          break;
        case MANDATORY_WARNING:
          issueLogger.mandatoryWarning( new IssueReporter.Position( diagnostic ), CompilerProperties.Warnings.ProcMessager( diagnostic.getMessage( Locale.getDefault() ) ) );
          break;
        case NOTE:
        case OTHER:
          issueLogger.note( new IssueReporter.Position( diagnostic ), CompilerProperties.Notes.ProcMessager( diagnostic.getMessage( Locale.getDefault() ) ) );
          break;
      }
    }
    finally
    {
      issueLogger.useSource( oldSource );
    }
  }

  @Override
  public Iterable<Symbol> getMembers( Symbol.ClassSymbol classSym )
  {
    return classSym.members().getSymbols();
  }

  @Override
  public Iterable<Symbol> getMembers( Symbol.ClassSymbol classSym, Filter<Symbol> filter )
  {
    return classSym.members().getSymbols( filter );
  }

  @Override
  public Iterable<Symbol> getMembersByName( Symbol.ClassSymbol classSym, Name call )
  {
    return classSym.members().getSymbolsByName( call );
  }

  @Override
  public Symbol.ClassSymbol getTypeElement( Context ctx, Object moduleCtx, String fqn )
  {
    Symbol.ClassSymbol classSym = null;
    if( moduleCtx instanceof JCTree.JCCompilationUnit )
    {
      Symbol.ModuleSymbol moduleSym = ((JCTree.JCCompilationUnit)moduleCtx).modle;
      classSym = JavacElements.instance( ctx ).getTypeElement( moduleSym, fqn );
    }
    else if( moduleCtx instanceof JavaFileManager.Location )
    {
      try
      {
        String moduleName = JavacPlugin.instance().getJavaFileManager().inferModuleName( (JavaFileManager.Location)moduleCtx );
        if( moduleName != null )
        {
          Name name = Names.instance( ctx ).fromString( moduleName );

          Symbol.ModuleSymbol moduleSym = Modules.instance( ctx ).getObservableModule( name );
          classSym = JavacElements.instance( ctx ).getTypeElement( moduleSym, fqn );
        }
      }
      catch( IOException ioe )
      {
        throw new RuntimeException( ioe );
      }
    }
    else if( moduleCtx != null )
    {
      throw new IllegalArgumentException( "Unexpected moduleCtx type: " + moduleCtx.getClass().getTypeName() );
    }
    return classSym == null
           ? JavacElements.instance( ctx ).getTypeElement( fqn )
           : classSym;
  }

  @Override
  public Symbol.ClassSymbol getLoadedClass( Context ctx, String fqn )
  {
    Symtab symtab = Symtab.instance( ctx );
    Name flatName = Names.instance( ctx ).fromString( fqn );
    for( Symbol.ModuleSymbol msym : Modules.instance( ctx ).allModules() )
    {
      Symbol.ClassSymbol classSym = symtab.getClass( msym, flatName );
      if( classSym != null )
      {
        return classSym;
      }
    }
    return null;
  }

  @Override
  public List<Type> getTargets( JCTree.JCLambda tree )
  {
    return tree.target == null ? List.nil() : List.of( tree.target );
  }
  @Override
  public void setTargets( JCTree.JCLambda tree, List<Type> targets )
  {
    tree.target = (targets == null || targets.isEmpty()) ? null : targets.head;
  }

  @Override
  public void logError( Log logger, JCDiagnostic.DiagnosticPosition pos, String key, Object... args )
  {
    logger.error( pos, new JCDiagnostic.Error( "compiler", key, args ) );
  }
}
